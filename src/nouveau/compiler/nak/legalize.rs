// Copyright Â© 2022 Collabora, Ltd.
// SPDX-License-Identifier: MIT

use crate::api::{GetDebugFlags, DEBUG};
use crate::ir::*;
use crate::liveness::{BlockLiveness, Liveness, SimpleLiveness};
use crate::sm70::legalize_sm70_instr;

use std::collections::{HashMap, HashSet};

pub type LegalizeBuilder<'a> = SSAInstrBuilder<'a>;

pub fn src_is_upred_reg(src: &Src) -> bool {
    match &src.src_ref {
        SrcRef::True | SrcRef::False => false,
        SrcRef::SSA(ssa) => {
            assert!(ssa.comps() == 1);
            match ssa[0].file() {
                RegFile::Pred => false,
                RegFile::UPred => true,
                _ => panic!("Not a predicate source"),
            }
        }
        SrcRef::Reg(_) => panic!("Not in SSA form"),
        _ => panic!("Not a predicate source"),
    }
}

pub fn src_is_reg(src: &Src, reg_file: RegFile) -> bool {
    match src.src_ref {
        SrcRef::Zero | SrcRef::True | SrcRef::False => true,
        SrcRef::SSA(ssa) => ssa.file() == Some(reg_file),
        SrcRef::Imm32(_) | SrcRef::CBuf(_) => false,
        SrcRef::Reg(_) => panic!("Not in SSA form"),
    }
}

pub fn swap_srcs_if_not_reg(
    x: &mut Src,
    y: &mut Src,
    reg_file: RegFile,
) -> bool {
    if !src_is_reg(x, reg_file) && src_is_reg(y, reg_file) {
        std::mem::swap(x, y);
        true
    } else {
        false
    }
}

fn src_is_imm(src: &Src) -> bool {
    matches!(src.src_ref, SrcRef::Imm32(_))
}

pub trait LegalizeBuildHelpers: SSABuilder {
    fn copy_ssa(&mut self, ssa: &mut SSAValue, reg_file: RegFile) {
        let tmp = self.alloc_ssa(reg_file, 1)[0];
        self.copy_to(tmp.into(), (*ssa).into());
        *ssa = tmp;
    }

    fn copy_ssa_ref(&mut self, vec: &mut SSARef, reg_file: RegFile) {
        for ssa in &mut vec[..] {
            self.copy_ssa(ssa, reg_file);
        }
    }

    fn copy_pred_ssa_if_uniform(&mut self, ssa: &mut SSAValue) {
        match ssa.file() {
            RegFile::Pred => (),
            RegFile::UPred => self.copy_ssa(ssa, RegFile::Pred),
            _ => panic!("Not a predicate value"),
        }
    }

    fn copy_pred_if_upred(&mut self, pred: &mut Pred) {
        match &mut pred.pred_ref {
            PredRef::None => (),
            PredRef::SSA(ssa) => {
                self.copy_pred_ssa_if_uniform(ssa);
            }
            PredRef::Reg(_) => panic!("Not in SSA form"),
        }
    }

    fn copy_src_if_upred(&mut self, src: &mut Src) {
        match &mut src.src_ref {
            SrcRef::True | SrcRef::False => (),
            SrcRef::SSA(ssa) => {
                assert!(ssa.comps() == 1);
                self.copy_pred_ssa_if_uniform(&mut ssa[0]);
            }
            SrcRef::Reg(_) => panic!("Not in SSA form"),
            _ => panic!("Not a predicate source"),
        }
    }

    fn copy_src_if_not_same_file(&mut self, src: &mut Src) {
        let SrcRef::SSA(vec) = &mut src.src_ref else {
            return;
        };

        if vec.comps() == 1 {
            return;
        }

        let mut all_same = true;
        let file = vec[0].file();
        for i in 1..vec.comps() {
            let c_file = vec[usize::from(i)].file();
            if c_file != file {
                debug_assert!(c_file.to_warp() == file.to_warp());
                all_same = false;
            }
        }

        if !all_same {
            self.copy_ssa_ref(vec, file.to_warp());
        }
    }

    fn copy_alu_src(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        let val = match src_type {
            SrcType::GPR
            | SrcType::ALU
            | SrcType::F32
            | SrcType::F16
            | SrcType::F16v2
            | SrcType::I32
            | SrcType::B32 => self.alloc_ssa(reg_file, 1),
            SrcType::F64 => self.alloc_ssa(reg_file, 2),
            SrcType::Pred => self.alloc_ssa(reg_file, 1),
            _ => panic!("Unknown source type"),
        };

        if DEBUG.annotate() {
            self.push_instr(Instr::new_boxed(OpAnnotate {
                annotation: "copy generated by legalizer".into(),
            }));
        }

        if val.comps() == 1 {
            self.copy_to(val.into(), src.src_ref.into());
        } else {
            match src.src_ref {
                SrcRef::Imm32(u) => {
                    // Immediates go in the top bits
                    self.copy_to(val[0].into(), 0.into());
                    self.copy_to(val[1].into(), u.into());
                }
                SrcRef::CBuf(cb) => {
                    // CBufs load 8B
                    self.copy_to(val[0].into(), cb.into());
                    self.copy_to(val[1].into(), cb.offset(4).into());
                }
                SrcRef::SSA(vec) => {
                    assert!(vec.comps() == 2);
                    self.copy_to(val[0].into(), vec[0].into());
                    self.copy_to(val[1].into(), vec[1].into());
                }
                _ => panic!("Invalid 64-bit SrcRef"),
            }
        }

        src.src_ref = val.into();
    }

    fn copy_alu_src_if_cbuf(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if matches!(src.src_ref, SrcRef::CBuf(_)) {
            self.copy_alu_src(src, reg_file, src_type);
        }
    }

    fn copy_alu_src_if_not_reg(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if !src_is_reg(src, reg_file) {
            self.copy_alu_src(src, reg_file, src_type);
        }
    }

    fn copy_alu_src_if_not_reg_or_imm(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if !src_is_reg(src, reg_file)
            && !matches!(&src.src_ref, SrcRef::Imm32(_))
        {
            self.copy_alu_src(src, reg_file, src_type);
        }
    }

    fn copy_alu_src_if_imm(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if src_is_imm(src) {
            self.copy_alu_src(src, reg_file, src_type);
        }
    }

    fn copy_alu_src_if_both_not_reg(
        &mut self,
        src1: &Src,
        src2: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if !src_is_reg(src1, reg_file) && !src_is_reg(src2, reg_file) {
            self.copy_alu_src(src2, reg_file, src_type);
        }
    }

    fn copy_alu_src_and_lower_fmod(
        &mut self,
        src: &mut Src,
        src_type: SrcType,
    ) {
        match src_type {
            SrcType::F16 | SrcType::F16v2 => {
                let val = self.alloc_ssa(RegFile::GPR, 1);
                self.push_op(OpHAdd2 {
                    dst: val.into(),
                    srcs: [Src::new_zero().fneg(), *src],
                    saturate: false,
                    ftz: false,
                    f32: false,
                });
                *src = val.into();
            }
            SrcType::F32 => {
                let val = self.alloc_ssa(RegFile::GPR, 1);
                self.push_op(OpFAdd {
                    dst: val.into(),
                    srcs: [Src::new_zero().fneg(), *src],
                    saturate: false,
                    rnd_mode: FRndMode::NearestEven,
                    ftz: false,
                });
                *src = val.into();
            }
            SrcType::F64 => {
                let val = self.alloc_ssa(RegFile::GPR, 2);
                self.push_op(OpDAdd {
                    dst: val.into(),
                    srcs: [Src::new_zero().fneg(), *src],
                    rnd_mode: FRndMode::NearestEven,
                });
                *src = val.into();
            }
            _ => panic!("Invalid ffabs srouce type"),
        }
    }

    fn copy_alu_src_if_fabs(&mut self, src: &mut Src, src_type: SrcType) {
        if src.src_mod.has_fabs() {
            self.copy_alu_src_and_lower_fmod(src, src_type);
        }
    }

    fn copy_alu_src_if_i20_overflow(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if src.as_imm_not_i20().is_some() {
            self.copy_alu_src(src, reg_file, src_type);
        }
    }

    fn copy_alu_src_if_f20_overflow(
        &mut self,
        src: &mut Src,
        reg_file: RegFile,
        src_type: SrcType,
    ) {
        if src.as_imm_not_f20().is_some() {
            self.copy_alu_src(src, reg_file, src_type);
        }
    }

    fn copy_ssa_ref_if_uniform(&mut self, ssa_ref: &mut SSARef) {
        for ssa in &mut ssa_ref[..] {
            if ssa.is_uniform() {
                let warp = self.alloc_ssa(ssa.file().to_warp(), 1)[0];
                self.copy_to(warp.into(), (*ssa).into());
                *ssa = warp;
            }
        }
    }
}

impl LegalizeBuildHelpers for LegalizeBuilder<'_> {}

fn legalize_sm50_instr(b: &mut LegalizeBuilder, instr: &mut Instr) {
    debug_assert!(!instr.is_uniform());

    use RegFile::GPR;

    match &mut instr.op {
        Op::Shf(op) => {
            b.copy_alu_src_if_not_reg(&mut op.shift, GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.high, GPR, SrcType::ALU);
            b.copy_alu_src_if_not_reg(&mut op.low, GPR, SrcType::GPR);
            b.copy_alu_src_if_i20_overflow(&mut op.shift, GPR, SrcType::GPR);
        }
        Op::Shl(op) => {
            b.copy_alu_src_if_not_reg(&mut op.src, GPR, SrcType::GPR);
            b.copy_alu_src_if_i20_overflow(&mut op.shift, GPR, SrcType::ALU);
        }
        Op::Shr(op) => {
            b.copy_alu_src_if_not_reg(&mut op.src, GPR, SrcType::GPR);
            b.copy_alu_src_if_i20_overflow(&mut op.shift, GPR, SrcType::ALU);
        }
        Op::FAdd(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F32);
        }
        Op::FMul(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(&mut op.srcs[0], GPR, SrcType::F32);
        }
        Op::FSet(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            if swap_srcs_if_not_reg(src0, src1, GPR) {
                op.cmp_op = op.cmp_op.flip();
            }
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F32);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F32);
        }
        Op::FSetP(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            if swap_srcs_if_not_reg(src0, src1, GPR) {
                op.cmp_op = op.cmp_op.flip();
            }
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F32);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F32);
        }
        Op::FSwzAdd(op) => {
            b.copy_alu_src_if_not_reg(&mut op.srcs[0], GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.srcs[1], GPR, SrcType::GPR);
        }
        Op::ISetP(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            if swap_srcs_if_not_reg(src0, src1, GPR) {
                op.cmp_op = op.cmp_op.flip();
            }
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::ALU);
            b.copy_alu_src_if_i20_overflow(src1, GPR, SrcType::ALU);
        }
        Op::Lop2(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(&mut op.srcs[0], GPR, SrcType::ALU);
        }
        Op::Rro(op) => {
            b.copy_alu_src_if_f20_overflow(&mut op.src, GPR, SrcType::F32);
        }
        Op::PSetP(_) => {}
        Op::MuFu(op) => {
            b.copy_alu_src_if_not_reg(&mut op.src, GPR, SrcType::GPR);
        }
        Op::DAdd(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F64);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F64);
        }
        Op::DFma(op) => {
            let [ref mut src0, ref mut src1, ref mut src2] = op.srcs;
            b.copy_alu_src_if_fabs(src0, SrcType::F64);
            b.copy_alu_src_if_fabs(src1, SrcType::F64);
            b.copy_alu_src_if_fabs(src2, SrcType::F64);
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F64);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F64);
            if src_is_reg(src1, GPR) {
                b.copy_alu_src_if_imm(src2, GPR, SrcType::F64);
            } else {
                b.copy_alu_src_if_not_reg(src2, GPR, SrcType::F64);
            }
        }
        Op::DMnMx(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F64);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F64);
        }
        Op::DMul(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            b.copy_alu_src_if_fabs(src0, SrcType::F64);
            b.copy_alu_src_if_fabs(src1, SrcType::F64);
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F64);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F64);
        }
        Op::DSetP(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            if swap_srcs_if_not_reg(src0, src1, GPR) {
                op.cmp_op = op.cmp_op.flip();
            }
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F64);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F64);
        }
        Op::Sel(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            if swap_srcs_if_not_reg(src0, src1, GPR) {
                op.cond = op.cond.bnot();
            }
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::ALU);
            b.copy_alu_src_if_i20_overflow(src1, GPR, SrcType::ALU);
        }
        Op::Shfl(op) => {
            b.copy_alu_src_if_not_reg(&mut op.src, GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg_or_imm(&mut op.lane, GPR, SrcType::ALU);
            b.copy_alu_src_if_not_reg_or_imm(&mut op.c, GPR, SrcType::ALU);
        }
        Op::Vote(_) => {}
        Op::IAdd2(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::I32);
        }
        Op::I2F(op) => {
            b.copy_alu_src_if_i20_overflow(&mut op.src, GPR, SrcType::ALU);
        }
        Op::F2F(op) => {
            b.copy_alu_src_if_f20_overflow(&mut op.src, GPR, SrcType::ALU);
        }
        Op::I2I(op) => {
            b.copy_alu_src_if_i20_overflow(&mut op.src, GPR, SrcType::ALU);
        }
        Op::IMad(op) => {
            let [ref mut src0, ref mut src1, ref mut src2] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::ALU);
            if src_is_reg(src1, GPR) {
                b.copy_alu_src_if_imm(src2, GPR, SrcType::ALU);
            } else {
                b.copy_alu_src_if_i20_overflow(src1, GPR, SrcType::ALU);
                b.copy_alu_src_if_not_reg(src2, GPR, SrcType::ALU);
            }
        }
        Op::IMul(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            if swap_srcs_if_not_reg(src0, src1, GPR) {
                op.signed.swap(0, 1);
            }
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::ALU);
        }
        Op::F2I(op) => {
            b.copy_alu_src_if_f20_overflow(&mut op.src, GPR, SrcType::ALU);
        }
        Op::IMnMx(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::ALU);
        }
        Op::Ipa(op) => {
            b.copy_alu_src_if_not_reg(&mut op.offset, GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.inv_w, GPR, SrcType::GPR);
        }
        Op::PopC(_) => {}
        Op::BRev(op) => {
            b.copy_alu_src_if_not_reg(&mut op.src, GPR, SrcType::ALU);
        }
        Op::Flo(op) => {
            b.copy_alu_src_if_i20_overflow(&mut op.src, GPR, SrcType::ALU);
        }
        Op::FMnMx(op) => {
            let [ref mut src0, ref mut src1] = op.srcs;
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F32);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F32);
        }
        Op::Prmt(op) => {
            b.copy_alu_src_if_not_reg(&mut op.srcs[0], GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.srcs[1], GPR, SrcType::GPR);
            b.copy_alu_src_if_i20_overflow(&mut op.sel, GPR, SrcType::ALU);
        }
        Op::FFma(op) => {
            let [ref mut src0, ref mut src1, ref mut src2] = op.srcs;
            b.copy_alu_src_if_fabs(src0, SrcType::F32);
            b.copy_alu_src_if_fabs(src1, SrcType::F32);
            b.copy_alu_src_if_fabs(src2, SrcType::F32);
            swap_srcs_if_not_reg(src0, src1, GPR);
            b.copy_alu_src_if_not_reg(src0, GPR, SrcType::F32);
            b.copy_alu_src_if_not_reg(src2, GPR, SrcType::F32);
            b.copy_alu_src_if_f20_overflow(src1, GPR, SrcType::F32);
        }
        Op::Ldc(op) => {
            // TODO: cb must be a bound constant buffer
            b.copy_alu_src_if_not_reg(&mut op.offset, GPR, SrcType::GPR);
        }
        Op::SuLd(op) => {
            b.copy_alu_src_if_not_reg(&mut op.handle, GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.coord, GPR, SrcType::GPR);
        }
        Op::SuAtom(op) => {
            b.copy_alu_src_if_not_reg(&mut op.coord, GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.handle, GPR, SrcType::GPR);
            b.copy_alu_src_if_not_reg(&mut op.data, GPR, SrcType::GPR);
        }
        Op::Out(op) => {
            b.copy_alu_src_if_not_reg(&mut op.handle, GPR, SrcType::GPR);
            b.copy_alu_src_if_i20_overflow(&mut op.stream, GPR, SrcType::ALU);
        }
        Op::Bfe(op) => {
            b.copy_alu_src_if_not_reg(&mut op.base, GPR, SrcType::ALU);
        }
        _ => {
            let src_types = instr.src_types();
            for (i, src) in instr.srcs_mut().iter_mut().enumerate() {
                match src_types[i] {
                    SrcType::SSA => {
                        assert!(src.as_ssa().is_some());
                    }
                    SrcType::GPR => {
                        assert!(src_is_reg(src, GPR));
                    }
                    SrcType::ALU
                    | SrcType::F16
                    | SrcType::F16v2
                    | SrcType::F32
                    | SrcType::F64
                    | SrcType::I32
                    | SrcType::B32 => {
                        panic!(
                            "({}): ALU srcs must be legalized explicitly",
                            &mut instr.op
                        );
                    }
                    SrcType::Pred => {
                        panic!(
                            "({}): Predicates must be legalized explicitly",
                            &mut instr.op
                        );
                    }
                    SrcType::Bar => panic!("Barrier regs are Volta+"),
                }
            }
        }
    }
}

fn legalize_instr(
    b: &mut LegalizeBuilder,
    bl: &impl BlockLiveness,
    block_uniform: bool,
    pinned: &HashSet<SSARef>,
    ip: usize,
    instr: &mut Instr,
) {
    // Handle a few no-op cases up-front
    match &instr.op {
        Op::Undef(_)
        | Op::PhiSrcs(_)
        | Op::PhiDsts(_)
        | Op::Pin(_)
        | Op::Unpin(_)
        | Op::FSOut(_) => {
            // These are implemented by RA and can take pretty much anything
            // you can throw at them.
            debug_assert!(instr.pred.is_true());
            return;
        }
        Op::Copy(_) => {
            // OpCopy is implemented in a lowering pass and can handle anything
            return;
        }
        Op::SrcBar(_) => {
            // This is turned into a nop by calc_instr_deps
            return;
        }
        Op::Swap(_) | Op::ParCopy(_) => {
            // These are generated by RA and should not exist yet
            panic!("Unsupported instruction");
        }
        _ => (),
    }

    if !instr.is_uniform() {
        b.copy_pred_if_upred(&mut instr.pred);
    }

    let src_types = instr.src_types();
    for (i, src) in instr.srcs_mut().iter_mut().enumerate() {
        *src = src.fold_imm(src_types[i]);
        b.copy_src_if_not_same_file(src);

        if !block_uniform {
            // In non-uniform control-flow, we can't collect uniform vectors so
            // we need to insert copies to warp regs which we can collect.
            match &mut src.src_ref {
                SrcRef::SSA(vec) => {
                    if vec.is_uniform()
                        && vec.comps() > 1
                        && !pinned.contains(vec)
                    {
                        b.copy_ssa_ref(vec, vec.file().unwrap().to_warp());
                    }
                }
                SrcRef::CBuf(CBufRef {
                    buf: CBuf::BindlessSSA(handle),
                    ..
                }) => assert!(pinned.contains(handle)),
                _ => (),
            }
        }
    }

    // OpBreak and OpBSsy impose additional RA constraints
    match &mut instr.op {
        Op::Break(OpBreak {
            bar_in, bar_out, ..
        })
        | Op::BSSy(OpBSSy {
            bar_in, bar_out, ..
        }) => {
            let bar_in_ssa = bar_in.src_ref.as_ssa().unwrap();
            if !bar_out.is_none() && bl.is_live_after_ip(&bar_in_ssa[0], ip) {
                let gpr = b.bmov_to_gpr(*bar_in);
                let tmp = b.bmov_to_bar(gpr.into());
                *bar_in = tmp.into();
            }
        }
        _ => (),
    }

    if b.sm() >= 70 {
        legalize_sm70_instr(b, instr);
    } else if b.sm() >= 50 {
        legalize_sm50_instr(b, instr);
    } else {
        panic!("Unknown shader model SM{}", b.sm());
    }

    let mut vec_src_map: HashMap<SSARef, SSARef> = HashMap::new();
    let mut vec_comps = HashSet::new();
    for src in instr.srcs_mut() {
        if let SrcRef::SSA(vec) = &src.src_ref {
            if vec.comps() == 1 {
                continue;
            }

            // If the same vector shows up twice in one instruction, that's
            // okay. Just make it look the same as the previous source we
            // fixed up.
            if let Some(new_vec) = vec_src_map.get(vec) {
                src.src_ref = (*new_vec).into();
                continue;
            }

            let mut new_vec = *vec;
            for c in 0..vec.comps() {
                let ssa = vec[usize::from(c)];
                // If the same SSA value shows up in multiple non-identical
                // vector sources or as multiple components in the same
                // source, we need to make a copy so it can get assigned to
                // multiple different registers.
                if vec_comps.get(&ssa).is_some() {
                    let copy = b.alloc_ssa(ssa.file(), 1)[0];
                    b.copy_to(copy.into(), ssa.into());
                    new_vec[usize::from(c)] = copy;
                } else {
                    vec_comps.insert(ssa);
                }
            }

            vec_src_map.insert(*vec, new_vec);
            src.src_ref = new_vec.into();
        }
    }
}

impl Shader<'_> {
    pub fn legalize(&mut self) {
        let sm = self.sm;
        for f in &mut self.functions {
            let live = SimpleLiveness::for_function(f);
            let mut pinned = HashSet::new();

            for (bi, b) in f.blocks.iter_mut().enumerate() {
                let bl = live.block_live(bi);
                let bu = b.uniform;

                let mut instrs = Vec::new();
                for (ip, mut instr) in b.instrs.drain(..).enumerate() {
                    if let Op::Pin(pin) = &instr.op {
                        if let Dst::SSA(ssa) = &pin.dst {
                            pinned.insert(*ssa);
                        }
                    }

                    let mut b = SSAInstrBuilder::new(sm, &mut f.ssa_alloc);
                    legalize_instr(&mut b, bl, bu, &pinned, ip, &mut instr);
                    b.push_instr(instr);
                    instrs.append(&mut b.as_vec());
                }
                b.instrs = instrs;
            }
        }
    }
}
